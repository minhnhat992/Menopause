{
    "collab_server" : "",
    "contents" : "library(rvest)\nlibrary(httr)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ReporteRs)\n\ntime <- Sys.time()\n\n# get the login url\nurl2 <- \"http://forum.menopausechitchat.com/main/authorization/signIn?target=http%3A%2F%2Fforum.menopausechitchat.com%2F\"\n\n# Initiate session using rvest\n\nsession <- html_session(url = url2)\n\n# initiate login, input email and password\n\nlogin <- session %>% \n  html_node(xpath = '//*[@id=\"xg_body\"]/div/div/form') %>% \n  html_form() %>% \n  set_values(\n    emailAddress = 'lisakurnit1970@gmail.com',\n    password = 'R3df!!sh'\n  )\n\n#submit login\nlogged_in <- session %>% \n  submit_form(login)\n\nmydoc <- docx()\n\n# jump to the first site that is sorted by most  recent\nfor (m in 1 : 207)\n{\n  \n  diss <- logged_in %>% \n    jump_to(paste('http://forum.menopausechitchat.com/forum?sort=mostRecentDiscussions&page=',m,sep=\"\"))\n  \n  # jump to a thread in a site\n  \n  for (h in 1: 9)\n  { \n    if(m == 1){\n      link <- diss %>% \n        html_nodes(xpath=paste('//*[@id=\"xg_body\"]/div[1]/div[2]/div[4]/table/tbody/tr[',h,']/td[1]/h3/a',sep=\"\")) %>% \n        html_attr(\"href\")\n    } else {\n      \n      link <- diss %>% \n        html_nodes(xpath=paste('//*[@id=\"xg_body\"]/div[1]/div[2]/div[2]/table/tbody/tr[',h,']/td[1]/h3/a',sep=\"\")) %>% \n        html_attr(\"href\")\n    }\n    \n    print(link)\n    \n    # jump to a thread\n    test <- logged_in %>% \n      jump_to(paste(link,'?page=1#comments',sep=\"\"))\n    \n    # Topic and main content name never changes\n    \n    ## Get Topic Name\n    \n    assign(paste(\"topic_\",h,sep = \"\"),\n           test %>% \n             html_nodes(xpath = '//*[@id=\"xg_body\"]/div[1]/div[1]/div[1]/div[2]/h1') %>% \n             html_text() %>% \n             as.character())\n       \n    ## Get who posted first\n    assign(paste(\"OP_\",h,sep = \"\"),\n           test %>% \n             html_nodes(xpath = '//*[@id=\"xg_body\"]/div[1]/div[1]/div[1]/div[2]/ul/li[1]') %>% \n             html_text())\n    \n    ## Get Content of Original Post\n    \n    assign(paste(\"content_\",h,sep=\"\"),\n           test %>%\n             html_nodes(xpath = '//*[@id=\"xg_body\"]/div[1]/div[1]/div[2]/div[1]/div/div') %>%\n             html_text() %>%\n             as.character())\n    \n    # set paragraph properties\n    \n    setting  <- parProperties(padding.bottom = 20)\n    \n    OP <- pot(get(paste(\"OP_\",h,sep=\"\")), textBold())\n    \n    content <- pot(get(paste(\"content_\",h,sep=\"\")))\n    \n\n    mydoc <- addTitle(mydoc, get(paste(\"topic_\",h,sep = \"\")), level = 1) %>% \n      addTitle(value = \"Main\", level = 2) %>% \n      addParagraph(set_of_paragraphs(OP,content), par.properties = setting) %>% \n      addTitle(\"Replies\", level = 2)\n    \n    # set paragraph properties\n    \n    \n    # find out the last page in that thread to put into loop\n    last_page <- test %>% \n      html_node(xpath='//*[@id=\"discussionReplies\"]/div[1]/ul') %>% \n      html_children() %>% \n      tail(n=1) %>% \n      html_children() %>% \n      html_attr(\"_maxpage\") %>% \n      as.numeric()\n    # if thread only has 1 page\n    if (length(last_page) == 0){\n      \n      testing <- test %>% \n        html_nodes(xpath = '//*[@id=\"discussionReplies\"]/div[1]') %>% \n        html_children()\n      \n      # Add comment in one page\n      tryCatch({\n        for (i in 2:13){\n          assign(paste(\"commenter_\",1,\"_\",i,sep=\"\"),\n                 substr(as.character(html_children(testing[2])[1] %>% \n                                       html_text()),\n                        29,1000))\n          \n          assign(paste(\"comment_\",1,\"_\",i,sep=\"\"),\n                 html_children(html_children(html_children(testing[i])[2])[1]) %>% \n                   html_text())\n          \n          full_comment <- pot(get(paste(\"commenter_\",1,\"_\",i,sep=\"\")), textBold()) + \" \" + pot(get(paste(\"comment_\",1,\"_\",i,sep=\"\")))\n          \n          mydoc <- addParagraph(mydoc, full_comment, par.properties = setting)\n          \n          print(paste(paste(\"comment_\",1,\"_\",i,sep=\"\"),\"in topic\",get(paste(\"topic_\",h,sep = \"\")),\"has been added\",sep=\" \"))\n          \n          rm(list = paste(\"comment_\",1,\"_\",i,sep=\"\"))\n          \n          rm(list = paste(\"commenter_\",1,\"_\",i,sep=\"\"))\n          \n        }}, error=function(e){})\n      \n    } else {\n      # go through pages in a discussion - if thread has more than 1 pages\n      for (n in 1 : last_page){\n        \n        assign(paste(\"page_\",n,sep = \"\"),\n               logged_in %>% \n                 jump_to(paste(link,'?page=',n,'#comments',sep=\"\")))\n        \n        testing <- get(paste(\"page_\",n,sep = \"\")) %>% \n          html_nodes(xpath = '//*[@id=\"discussionReplies\"]/div[1]') %>% \n          html_children()\n        \n        # Add comment in one page\n        tryCatch({\n          for (i in 2:13){\n            \n            assign(paste(\"commenter_\",n,\"_\",i,sep=\"\"),\n                   substr(as.character(html_children(testing[2])[1] %>% \n                                         html_text()),\n                          29,1000))\n            \n            assign(paste(\"comment_\",n,\"_\",i,sep=\"\"),\n                   html_children(html_children(html_children(testing[i])[2])[1]) %>% \n                     html_text())\n            full_comment <- pot(get(paste(\"commenter_\",n,\"_\",i,sep=\"\")), textBold()) + \" \" + pot(get(paste(\"comment_\",n,\"_\",i,sep=\"\")))\n            \n            mydoc <- addParagraph(mydoc, full_comment, par.properties = setting)\n            \n            print(paste(paste(\"comment_\",n,\"_\",i,sep=\"\"),\"in topic\",get(paste(\"topic_\",h,sep = \"\")),\"has been added\",sep=\" \"))\n            \n            rm(list = paste(\"comment_\",n,\"_\",i,sep=\"\"))\n            \n            rm(list = paste(\"commenter_\",n,\"_\",i,sep=\"\"))\n            \n          }}, error=function(e){})\n        \n        \n      }}\n    \n    \n    \n  }\n  \n  \n  tryCatch(\n    {\n      writeDoc(mydoc, file = \"E:/R/Menopause/List/List_8.docx\")}, \n    error = function(e){\"emoticon topic\"}\n  )\n  \n}\n\n\nfinal <- Sys.time() - time\n# \n\n\n\n\n",
    "created" : 1475507749203.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "429235055",
    "id" : "9B3325D7",
    "lastKnownWriteTime" : 1475507591,
    "last_content_update" : 1475507591,
    "path" : "E:/R/Menopause/Final.R",
    "project_path" : "Final.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}